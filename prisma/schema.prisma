// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   Int
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id          Int        @id @default(autoincrement())
    email       String     @unique
    password    String
    role        String     @default("user")
    accounts    Account[]
    sessions    Session[]
    employeeId  Int      @unique
    employee    Employee?  @relation(fields: [employeeId], references: [id])
}

model Employee {
    id                Int              @id @default(autoincrement())
    firstName        String
    lastName         String
    phoneNumber      String
    status           String
    manager          Employee?        @relation("ManagerToEmployee", fields: [managerId], references: [id], onDelete: SetNull)
    managerId        Int?
    subordinates     Employee[]       @relation("ManagerToEmployee")
    departments      EmployeeDepartment[]
    user             User?
    managedDepartments Department[]    @relation("ManagerToDepartment")
}

model Department {
    id                Int                @id @default(autoincrement())
    name              String             @unique
    status            String
    employees         EmployeeDepartment[]
    managerId        Int?                
    manager          Employee?           @relation("ManagerToDepartment", fields: [managerId], references: [id], onDelete: SetNull)
}

model EmployeeDepartment {
    employee     Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
    employeeId   Int
    department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    departmentId Int

    @@id([employeeId, departmentId])
}